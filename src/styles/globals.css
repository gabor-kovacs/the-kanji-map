@import "tailwindcss";
@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-border, currentColor);
    /* border-color: var(--color-gray-200, currentColor); */
  }
}

@utility text-balance {
  text-wrap: balance;
}

@layer utilities {
  body {
    color: var(--foreground);
    background: var(--background);
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 10% 20%;
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 200 66% 49%;
    --primary-foreground: 200 40% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 212 16% 10%;
    --foreground: 212 6.5% 97.45%;
    --card: 212 52% 6.37%;
    --card-foreground: 212 6.5% 97.45%;
    --popover: 212 52% 6.37%;
    --popover-foreground: 212 6.5% 97.45%;
    --primary: 200 66% 49%;
    --primary-foreground: 200 6.5% 4.9%;
    --secondary: 212 35.1% 15.19%;
    --secondary-foreground: 212 6.5% 97.45%;
    --muted: 212 20% 15.19%;
    --muted-foreground: 212 6.5% 54.9%;
    --accent: 212 20% 15.19%;
    --accent-foreground: 212 6.5% 97.45%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 212 6.5% 97.45%;
    --border: 212 35.1% 15.19%;
    --input: 212 35.1% 15.19%;
    --ring: 212 65% 49%;
  }
}

@layer components {
  .kanji-svg-container {
    svg {
      width: 80px !important;
      height: 80px !important;
    }
    svg path[id] {
      fill: hsl(var(--accent)) !important;
    }
    svg path[clip-path] {
      stroke: hsl(var(--foreground)) !important;
    }
  }
}